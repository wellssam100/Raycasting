// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain




struct Ray 
{
    float3 origin;
    float3 direction;
    //reflection energy
    float3 energy;
};
//Actual Tracing
struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
};

struct Sphere 
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

//constants
static const float PI = 3.14159265f;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

//Skybox
Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

//Anti-Aliasing
float2 _PixelOffset;
//Direcitonal Light
float4 _DirectionalLight;

StructuredBuffer<Sphere> _Spheres;


Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}
//Actual Tracing
RayHit CreateRayHit() 
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

Ray CreateCameraRay(float2 uv)
{
    //Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

    //Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

    //Transform the direction from the camera to the world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}

//Ground Plane
// Only check the y variable of the ray, use zero as the base line
void IntersectGroundPlane(Ray ray, inout RayHit bestHit)
{
    float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < bestHit.distance) 
    {
        bestHit.distance = t; 
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = float3(0.0f, 1.0f, 0.0f);
        bestHit.specular = float3(0.6f, 0.6f, 0.6f);
        bestHit.albedo = float3(0.6f, 0.6f, 0.6f);
    }
}

//Sphere
void IntersectSphere(Ray ray, inout RayHit bestHit, Sphere sphere) 
{
    float3 d = ray.origin - sphere.position;
    float p1 = -dot(ray.direction, d);
    float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2sqr < 0) 
    {
        return;
    }
    float p2 = sqrt(p2sqr);
    //checks for negative positions and adds accordingly
    float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    
    if (t > 0 && t < bestHit.distance) 
    {
        bestHit.distance = t;
        bestHit.position = ray.origin + t * ray.direction;
        bestHit.normal = normalize(bestHit.position - sphere.position);
        bestHit.albedo = sphere.albedo;
        bestHit.specular = sphere.specular;
    }
}

RayHit Trace(Ray ray) 
{
    RayHit bestHit = CreateRayHit();
    IntersectGroundPlane(ray, bestHit);
    

    //Trace Spheres
    uint numSpheres, stride;
    _Spheres.GetDimensions(numSpheres, stride);
    for (uint i = 0; i < numSpheres; i++)
    {
        IntersectSphere(ray, bestHit, _Spheres[i]);
    }
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit) 
{
    //Sample the skybox and write the color 

// 
    if (hit.distance < 1.#INF) 
    {
        //return the normal
        //this is a color that is dependant on the normal
        //return hit.normal * 0.5f + 0.5f;
        
        
        //float3 specular = float3(0.6f, 0.65f, 0.6f);
        //float3 albedo = float3(0.8f, 0.8f, 0.8f);

        //Reflect the ray adn multiply energy with specular relfection
        ray.origin = hit.position + hit.normal * 0.001f;
        ray.direction = reflect(ray.direction, hit.normal);
        ray.energy *= hit.specular;

        //Calculate shadows
        bool shadow = false;
        Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
        RayHit shadowHit = Trace(shadowRay);
        if (shadowHit.distance != 1.#INF)
        {
            return float3(0.0f, 0.0f, 0.0f);
        }

        //this is the diffuse return
        return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * _DirectionalLight.w * hit.albedo;
    }
    else 
    {
        //Erase the ray's energy - the sky doesn't reflect anything
        ray.energy = 0.0f;

        //Sample the skybox and write it 
        float theta = acos(ray.direction.y) / -PI;
        float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
        return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
        //If it doesnt hit something return the background
        //return background;
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
    //gets the random position inside of the pixel with pixel offset
    float2 uv = float2((id.xy + _PixelOffset) / float2(width, height) * 2.0f - 1.0f);

    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    
    //
    //RayHit hit = Trace(ray);
    //float3 result = Shade(ray, hit);
    
    float3 result = float3(0, 0, 0);

    for (int i = 0; i < 8; i++) 
    {
        RayHit hit = Trace(ray);
        result += ray.energy * Shade(ray, hit);

        if (!any(ray.energy)) 
        {
            break;
        }
    }
    
    Result[id.xy] = float4(result, 1);
    
    //Convert cartesian to spherical coordinates to map to skybox texture
    //float theta = acos(ray.direction.y) / -PI;
    //float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
    //Result[id.xy] = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0);

    // Write some colors
    // Rainbow
    // Result[id.xy] = float4(ray.direction * 0.5f + 0.5f, 1.0f);

    // Default Shader
    // Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
